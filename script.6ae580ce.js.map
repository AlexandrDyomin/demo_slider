{"version":3,"sources":["model/Scale.ts","model/Roller.ts","view/FormElements.ts","view/FillableRange.ts","view/Outputs.ts","view/Rollers.ts","view/Scale.ts","view/Template.ts","view/SliderView.ts","model/SliderModel.ts","controller/SliderController.ts","Slider.ts","script.ts"],"names":[],"mappings":"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","file":"script.6ae580ce.js","sourceRoot":"..","sourcesContent":["import type { IScale, scaleSettings } from './typingForScale';\r\n\r\nclass Scale implements IScale {\r\n  private min: number = 0;\r\n  private max: number;\r\n  private step: number = 1;\r\n\r\n  constructor(settings: scaleSettings) {\r\n    let { min, max, step } = settings;\r\n\r\n    if (max === min) throw Error(\"Некорректный размер шкалы\");\r\n\r\n    if (max < min) {\r\n      [this.min, this.max] = [max, min];\r\n    } else {\r\n      this.min = min;\r\n      this.max = max;\r\n    }\r\n\r\n    this.setStep(step);\r\n  };\r\n\r\n  getMinValue(): number {\r\n    return this.min;\r\n  }\r\n\r\n  setMinValue(value: number) {\r\n    if (value === this.max) throw Error(\"Минимальное значение не должно быть равно максимальному\");\r\n\r\n    if (value > this.max) {\r\n      [this.min, this.max] = [this.min, value];\r\n    } else {\r\n      this.min = value;\r\n    }\r\n  }\r\n\r\n  getMaxValue(): number {\r\n    return this.max;\r\n  }\r\n\r\n  setMaxValue(value: number) {\r\n    if (value === this.min) throw Error(\"Максиимальное значение не должно быть равно минимальному\");\r\n\r\n    if (value < this.min) {\r\n      [this.min, this.max] = [value, this.min];\r\n    } else {\r\n      this.max = value;\r\n    }\r\n  }\r\n\r\n  getStep(): number {\r\n    return this.step;\r\n  }\r\n\r\n  setStep(value: number): void {\r\n    if (value < 0) throw Error(\"Некорректное значение шага\");\r\n    this.step = value;\r\n  }\r\n}\r\n\r\nmodule.exports = Scale;\r\nexport default Scale;","interface IRoller {\r\n  getValue(): number;\r\n  setValue(value: number): void\r\n}\r\n\r\n\r\nclass Roller implements IRoller {\r\n  constructor(private value: number) {}\r\n\r\n  public getValue(): number {\r\n    return this.value;\r\n  }\r\n\r\n  public setValue(value: number) {\r\n    this.value = value;\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = Roller;\r\nexport default Roller;\r\nexport type { IRoller };\r\n","interface IFormElements {\r\n  update(value: string, descriptor: 0 | 1): void;\r\n}\r\n\r\nclass FormElements implements IFormElements {\r\n  private inputs: NodeList;\r\n\r\n  constructor(inputs: NodeList) {\r\n    this.inputs = inputs;\r\n  }\r\n\r\n  update(value: string, descriptor: 0 | 1 = 0): void {\r\n    (<HTMLInputElement>this.inputs[descriptor]).value = value;\r\n  }\r\n}\r\n\r\nexport  { FormElements, IFormElements };","interface IFillableRange {\r\n  paint(startPos: number, endPos: number): void;\r\n}\r\n\r\nclass FillableRange implements IFillableRange {\r\n  private range: HTMLElement;\r\n  private type: 'horizontal' | 'vertical';\r\n\r\n  constructor(range: HTMLElement, type: 'horizontal' | 'vertical') {\r\n    this.range = range;\r\n    this.type = type;\r\n  }\r\n\r\n  paint(startPos: number, endPos: number): void {\r\n    if (this.type === 'horizontal'){\r\n      this.range.style.left = `${ startPos }px`;\r\n      this.range.style.right = `${ endPos }px`;\r\n    } else {\r\n      this.range.style.bottom = `${ startPos }px`;\r\n      this.range.style.top = `${ endPos }px`;\r\n    }\r\n  }\r\n}\r\n\r\nexport { FillableRange, IFillableRange } ;","import { IOutputs, outputSettings } from './typingForOutputs';\r\n\r\nclass Outputs implements IOutputs{\r\n  private outputs: Node[];\r\n  private settings: outputSettings;\r\n\r\n  constructor(outputs: Node[], settings: outputSettings) {\r\n    this.settings = settings;\r\n    this.outputs = outputs;\r\n  }\r\n\r\n  updateOutputs(descriptor: 0 | 1, value: number): void {\r\n    let output: HTMLElement = this.outputs[descriptor] as HTMLElement;\r\n    output.innerText = `${value}${this.settings.prefix ? ' ' + this.settings.prefix : ''}`;\r\n\r\n    if (this.settings.range) {\r\n      output = (this.outputs[2] as HTMLElement).children[descriptor] as HTMLElement;\r\n      output.innerText = `${value}${this.settings.prefix ? ' ' + this.settings.prefix : ''}`;\r\n    }\r\n  }\r\n\r\n  rerenderOutputs(): void {\r\n    if (this.settings.range) {\r\n      let [outputFirst, outputSecond ] = this.outputs;\r\n      let coordinatesOutputs: DOMRect[]= this.getElementsCoordinates(<HTMLElement>outputFirst, <HTMLElement>outputSecond);\r\n      if (this.settings.type === 'horizontal') {\r\n        if (coordinatesOutputs[0].right >= coordinatesOutputs[1].left) {\r\n          this.showOutputCommon();\r\n        } else {\r\n          this.hiddeOutputCommon();\r\n        }\r\n      }\r\n\r\n      if (this.settings.type === 'vertical') {\r\n        if (coordinatesOutputs[1].bottom >= coordinatesOutputs[0].top) {\r\n          this.showOutputCommon();\r\n        } else {\r\n          this.hiddeOutputCommon();\r\n        }\r\n      }\r\n    } \r\n  }\r\n\r\n  private showOutputCommon() {\r\n    let [outputFirst, outputSecond, outputCommon ] = this.outputs;\r\n    (<HTMLElement>outputCommon).classList.remove('slider__display_hidden');\r\n    (<HTMLElement>outputFirst).classList.add('slider__display_hidden');\r\n    (<HTMLElement>outputSecond).classList.add('slider__display_hidden');\r\n  }\r\n\r\n  private hiddeOutputCommon() {\r\n    let [outputFirst, outputSecond, outputCommon ] = this.outputs;\r\n    (<HTMLElement>outputCommon).classList.add('slider__display_hidden');\r\n    (<HTMLElement>outputFirst).classList.remove('slider__display_hidden');\r\n    (<HTMLElement>outputSecond).classList.remove('slider__display_hidden');\r\n  }\r\n\r\n  private getElementsCoordinates(...elements: HTMLElement []): DOMRect[] {\r\n    return elements.map(el => el.getBoundingClientRect());\r\n  }\r\n}\r\n\r\nexport { Outputs, IOutputs };","import type { IRollers } from './typingForRollers';\r\n\r\nclass Rollers implements IRollers {\r\n  private rollers: NodeList;\r\n  private directionOfSlide: 'horizontal' | 'vertical';\r\n  private descriptor: 0 | 1 = 0;\r\n  private size: number;\r\n\r\n  constructor(\r\n    rollers: NodeList,\r\n    directionOfSlide: 'horizontal' | 'vertical'\r\n    ) {\r\n    this.rollers = rollers;\r\n    this.directionOfSlide = directionOfSlide;\r\n    this.size = (<HTMLElement>this.rollers[0] ).offsetWidth;\r\n  }\r\n\r\n  determineDescriptor(roller: HTMLElement): void {\r\n    if (roller === this.rollers[0]) {\r\n      this.descriptor = 0;\r\n    } else {\r\n      this. descriptor = 1;\r\n    }\r\n  }\r\n\r\n  setDescriptor(descriptor: 0 | 1): void {\r\n    this.descriptor = descriptor;\r\n  }\r\n\r\n  slide(position: number, descriptor: 0 | 1): void {\r\n    // переместим бегунок\r\n    if (this.directionOfSlide === 'horizontal') {\r\n      (<HTMLElement>this.rollers[descriptor]).style.left = `${ position }px`;\r\n    } else {\r\n      (<HTMLElement>this.rollers[descriptor]).style.top = `${ position }px`;\r\n    }\r\n  }\r\n\r\n  getSize(): number {\r\n    return this.size;\r\n  }\r\n\r\n  getDescriptor(): 0 | 1 {\r\n    return this.descriptor;\r\n  }\r\n\r\n  getLastUpdatedPosition(): number {\r\n    return this.getPosition(this.descriptor);\r\n  }\r\n\r\n  getPosition(descriptor: number): number {\r\n    let roller: HTMLElement = <HTMLElement>this.rollers[descriptor];\r\n    let position: number;\r\n\r\n    if (this.directionOfSlide === 'horizontal') {\r\n      position = +roller.style.left.replace('px', '');\r\n    } else {\r\n      position = +roller.style.top.replace('px', '');\r\n    }\r\n\r\n    return position;\r\n  }\r\n}\r\n\r\nexport default Rollers;","import type { IScale, scaleSettings } from './typingForScale';\r\n\r\nclass Scale implements IScale {\r\n  private step: number;                  // размер шага, px\r\n  private scaleSize: number;             // ширина(высота) шкалы, px\r\n  private scale: HTMLElement;\r\n  private range: HTMLElement;            // закрашиваемая часть шкалы\r\n  private rollerSize: number;\r\n  private zeroOffset: number;            // смещение нуля на шкале, px\r\n  private scaleOffset: number;           // смещение шкалы относительно окна, px\r\n  private settings: scaleSettings;\r\n  private numberOfDecimalPlaces: number; // максимальное количество знаков, отображаемых после запятой\r\n\r\n  constructor(\r\n    scale: HTMLElement,\r\n    range: HTMLElement,\r\n    rollerSize: number,\r\n    settings: scaleSettings\r\n  ) {\r\n    this.settings = settings;\r\n    this.scale = scale;\r\n    this.range = range;\r\n    this.rollerSize = rollerSize;\r\n    this.scaleSize = this.calcScaleSize();\r\n    this.zeroOffset = this.caclZeroOffset();\r\n    this.scaleOffset = this.calcScaleOffset();\r\n    this.step = this.calcStep();\r\n    this.numberOfDecimalPlaces = this.countDecimalPlaces(settings.step);\r\n\r\n    document.addEventListener('scroll', () => {\r\n      this.scaleOffset = this.calcScaleOffset();\r\n    })\r\n  }\r\n\r\n  calcValue(position: number): number {\r\n    // вычислим значение ролика\r\n    let value: number = position / this.scaleSize;\r\n    value = value * (this.settings.max - this.settings.min);\r\n\r\n    let offset = this.settings.min - 0;\r\n    value += offset;\r\n\r\n    if (this.settings.type === 'vertical') {\r\n      value = this.settings.max - value + offset;\r\n    }\r\n\r\n    return this.roundValue(value);\r\n }\r\n\r\n  calcSizes(): void {\r\n    this.scaleSize = this.calcScaleSize();\r\n    this.zeroOffset = this.caclZeroOffset();\r\n    this.scaleOffset = this.calcScaleOffset();\r\n    this.step = this.calcStep();\r\n  }\r\n\r\n  getScaleOffset(): number {\r\n    return this.scaleOffset;\r\n  }\r\n\r\n  getZeroOffset(): number {\r\n    return this.zeroOffset;\r\n  }\r\n\r\n  getStep(): number {\r\n    return this.step;\r\n  }\r\n\r\n  getScaleSize(): number {\r\n    return this.scaleSize;\r\n  }\r\n\r\n  private calcStep(): number {\r\n    return this.settings.step /\r\n      (this.settings.max - this.settings.min) * this.scaleSize;\r\n  }\r\n\r\n  private caclZeroOffset(): number {\r\n    return (this.settings.min - 0) /\r\n      (this.settings.max - this.settings.min) * this.scaleSize;\r\n  }\r\n\r\n  private calcScaleOffset(): number {\r\n    if (this.settings.type === 'horizontal') {\r\n      return this.scale.getBoundingClientRect().left;\r\n    }\r\n\r\n    return this.scale.getBoundingClientRect().top;\r\n  }\r\n\r\n  private calcScaleSize(): number {\r\n    if (this.settings.type === 'vertical') {\r\n      return this.scale.offsetHeight - this.rollerSize;\r\n    }\r\n\r\n    return this.scale.offsetWidth - this.rollerSize;\r\n  }\r\n\r\n  private countDecimalPlaces(value: number): number {\r\n    let integerAndDecimal: string[] = value.toString().split('.');\r\n    if (integerAndDecimal.length === 1) return 1;\r\n    return value.toString().split('.')[1].length;\r\n  }\r\n\r\n  private roundValue(value: number): number {\r\n    let x = Math.pow(10, this.numberOfDecimalPlaces);\r\n    return Math.round(value * x) /x;\r\n  }\r\n}\r\n\r\nexport default Scale;","import type { ITemplate, templateSettings } from './typingForTemplate';\r\n\r\nclass Template implements ITemplate {\r\n  private slider: HTMLElement;\r\n  private scale: HTMLElement;\r\n  private range: HTMLElement;\r\n  private rollers: NodeList;\r\n  private inputs: NodeList;\r\n  private outputs: Node [];\r\n  private settings: templateSettings;\r\n\r\n  constructor(container: HTMLElement, settings: templateSettings) {\r\n    this.settings = settings;\r\n    container.innerHTML = this.getTemplateForSlider();\r\n\r\n    let slider : HTMLElement | null =\r\n      container.querySelector('.slider');\r\n\r\n    let scale : HTMLElement | null =\r\n      container.querySelector('.slider__scale');\r\n\r\n    let range : HTMLElement | null =\r\n      container.querySelector('.slider__range');\r\n\r\n    let rollers : NodeList =\r\n      container.querySelectorAll('.slider__roller');\r\n\r\n    let inputs : NodeList =\r\n      container.querySelectorAll('input');\r\n    \r\n    let outputs : Node [] =\r\n      [...container.querySelectorAll('.slider__roller .slider__display'), \r\n      (container.querySelector('.slider__display_common') as Node)];\r\n\r\n    if (\r\n      slider && scale &&\r\n      range && outputs.length &&\r\n      rollers.length > 0 && inputs.length > 0\r\n    ) {\r\n      this.slider = slider;\r\n      this.scale = scale;\r\n      this.range = range;\r\n      this.rollers = rollers;\r\n      this.inputs = inputs;\r\n      this.outputs = outputs;\r\n    } else {\r\n      throw Error('Не удалось отобразить слайдер на странице');\r\n    }\r\n  }\r\n\r\n  public getSlider(): HTMLElement {\r\n    return this.slider;\r\n  }\r\n\r\n  public getScale(): HTMLElement {\r\n    return this.scale;\r\n  }\r\n\r\n  public getRange(): HTMLElement {\r\n    return this.range;\r\n  }\r\n\r\n  public getRollers(): NodeList {\r\n    return this.rollers;\r\n  }\r\n\r\n  public getInputs(): NodeList {\r\n    return this.inputs;\r\n  }\r\n\r\n  public getOutputs(): Node [] {\r\n    return this.outputs;\r\n  }\r\n\r\n  private getTemplateForSlider(): string {    \r\n    return `\r\n      <div class='slider'>\r\n        ${this.getTemplateForInputs()}\r\n        <div class='slider__scale slider__scale_${ this.settings.type }'>\r\n          ${this.settings.grid && this.getTemplateForGrid()}\r\n          ${this.getTemplateForRange()}\r\n          ${this.getTemplateForRollers()}\r\n        </div>\r\n      </div>`;\r\n  }\r\n\r\n  private getTemplateForInputs(): string {\r\n    const { range, min, max, values, names } = this.settings;\r\n    \r\n    let template: string;\r\n    if (range) {\r\n      template = `\r\n        <input \r\n          class='slider__min-val' \r\n          value='${values[0]}' \r\n          name = '${names ? names[0] : ``}'\r\n        >\r\n        <input \r\n          class='slider__max-val' \r\n          value='${values[1]}' \r\n          name = '${names ? names[1] : ``}'\r\n        >`;\r\n    } else {\r\n      template = `\r\n        <input \r\n          class='slider-default_hidden'\r\n          type='range' \r\n          min='${ min }'\r\n          max='${ max }'\r\n          value='${values[0]}'\r\n          name = '${names ? names[0] : ``}'\r\n        >`;\r\n    }\r\n\r\n    return template;\r\n  }\r\n\r\n  private getTemplateForRange(): string {  \r\n    let template: string;\r\n    if (this.settings.range) {\r\n      template = `\r\n        <div class='slider__range'>\r\n          <output class='slider__display slider__display_common slider__display_hidden'>\r\n              <span class='slider__value'></span> \r\n              - \r\n              <span class='slider__value'></span>\r\n          </output>\r\n        </div>`;\r\n    } else {\r\n      template = `<div class='slider__range'></div>`;\r\n    }\r\n\r\n    return template;\r\n  }\r\n\r\n  private getTemplateForRollers(): string {\r\n    let template: string;\r\n    if (this.settings.range) {\r\n      template = `\r\n        <div class='slider__roller slider__roller_first'>\r\n          <output class='slider__display'></output>\r\n        </div>\r\n        <div class='slider__roller slider__roller_second'>\r\n          <output class='slider__display'></output>\r\n        </div>`;\r\n    } else {\r\n      template =  `\r\n        <div class='slider__roller slider__roller_first'>\r\n          <output class='slider__display'></output>\r\n        </div>`;\r\n    }\r\n\r\n    return template;\r\n  }\r\n\r\n  private getTemplateForGrid(): string {\r\n    let { min, max } = this.settings;\r\n    let grid: HTMLElement = document.createElement('div');\r\n    grid.className = 'grid';\r\n     \r\n    let numberOfMarks: number = 21;\r\n    for (let i = 0; i < numberOfMarks; i++) {\r\n      let mark: HTMLElement = document.createElement('span');\r\n      mark.className = 'grid__mark';\r\n      grid.append(mark);\r\n    }\r\n\r\n    let step: number = (max - min) * 0.25;\r\n    let value: number = min;\r\n    let marks: HTMLCollection = grid.children;\r\n    for(let i = 0; i < numberOfMarks; i += 5) {\r\n      let valueOfMark: HTMLElement = document.createElement('span');\r\n      valueOfMark.textContent = `${value}`;\r\n      valueOfMark.className = 'grid__text';\r\n      marks[i].append(valueOfMark);\r\n      value += step;\r\n    }\r\n\r\n    return grid.outerHTML;\r\n  }\r\n}\r\n\r\nexport default Template;","import type { IScale } from './typingForScale';\r\nimport type { sliderSettings } from '../sliderSettings';\r\nimport type { ITemplate } from './typingForTemplate';\r\nimport type { IRollers } from './typingForRollers';\r\nimport type{ ISliderView } from './typingForSliderView';\r\nimport { FormElements, IFormElements } from './FormElements';\r\nimport { FillableRange, IFillableRange } from './FillableRange';\r\nimport { Outputs, IOutputs } from './Outputs';\r\nimport Rollers from './Rollers';\r\nimport Scale from './Scale';\r\nimport Template from './Template';\r\n\r\nclass SliderView implements ISliderView {\r\n  private scale: IScale;\r\n  private minLimit: number; // минимально допустимое смещение бегунка,px\r\n  private maxLimit: number; // максимально допустимое смещение бегунка, px\r\n  private rollers: IRollers;\r\n  private template: ITemplate;\r\n  private inputs: IFormElements;\r\n  private range: IFillableRange;\r\n  private outputs: IOutputs;\r\n  private settings: sliderSettings;\r\n\r\n  constructor(container: HTMLElement, settings: sliderSettings) {\r\n    this.settings = settings;\r\n    this.template = new Template(container, settings);\r\n    this.inputs = new FormElements(this.getInputs());\r\n    this.rollers = new Rollers(this.getRollers(), settings.type);\r\n    this.range = new FillableRange(this.getRange(), settings.type);\r\n    this.outputs = new Outputs(this.getOutputs(), settings);\r\n    this.scale = new Scale(\r\n      this.getScale(),\r\n      this.getRange(),\r\n      this.rollers.getSize(),\r\n      settings\r\n    );\r\n\r\n    this.minLimit = 0;\r\n    this.maxLimit = this.scale.getScaleSize();\r\n\r\n    // добавим объекту window обработчик на событие resize\r\n    this.handleDocumentResize = this.handleDocumentResize.bind(this);\r\n    window.addEventListener('resize', this.handleDocumentResize);\r\n\r\n    // обновим положение бегунков в соответствие с переданными настройками\r\n    this.settings.values.forEach( (value, i) => this.update(value, <0 | 1>i) );\r\n  }\r\n\r\n  getRollersPositions(): [number, number?] {\r\n    let positions: [number, number?] | [] = [0];\r\n    for (let i = 0; i < this.getRollers().length; i++) {\r\n      positions[i] = this.rollers.getPosition(i);\r\n    }\r\n    return positions;\r\n  }\r\n\r\n  getOutputs(): Node[] {\r\n    return this.template.getOutputs();\r\n  }\r\n\r\n  getInputs(): NodeList {\r\n    return this.template.getInputs();\r\n  }\r\n\r\n  update(\r\n    value: number | PointerEvent,\r\n    descriptor?: 0 | 1\r\n  ): { value: number, descriptor: 0 | 1 } | null {\r\n    // вычислим смещение бегунка относительно шкалы\r\n    let position: number = this.calcPosition(value);\r\n\r\n    // вычислим значение ролика и его номер\r\n    if (position !== this.rollers.getLastUpdatedPosition() ||\r\n        this.getSettings().values[0] === this.getSettings().values[1]\r\n       ) {\r\n      let inputValue: number;\r\n\r\n      if (typeof value === 'number' && descriptor !== undefined) {\r\n        // переместим бегунок\r\n        this.rollers.slide(position, descriptor);\r\n        inputValue = value;\r\n      } else {\r\n        inputValue = this.scale.calcValue(position);\r\n        descriptor = this.rollers.getDescriptor();\r\n      }\r\n\r\n      if (value instanceof PointerEvent && value.type === 'pointerdown') {\r\n       this.addSmoothTransition(descriptor);\r\n      }\r\n\r\n      // переместим бегунок\r\n      this.rollers.slide(position, descriptor);\r\n\r\n      if (value instanceof PointerEvent && value.type === 'pointerdown') {\r\n        setTimeout(this.removeSmoothTransition, 300, descriptor)\r\n      }\r\n\r\n      if (value instanceof PointerEvent && value.type === 'pointermove') {\r\n       this.removeSmoothTransition(descriptor);\r\n      }\r\n      \r\n      // обновим значение инпута\r\n      this.inputs.update(inputValue.toString(), descriptor);\r\n\r\n      // закрасим диапазон\r\n      let { startPos, endPos } = this.calcStartEndPositionsOfRange();\r\n      this.range.paint(startPos, endPos);\r\n\r\n      this.outputs.updateOutputs(descriptor, inputValue);\r\n\r\n      this.outputs.rerenderOutputs();\r\n\r\n      return {\r\n        value: inputValue,\r\n        descriptor: descriptor\r\n      };\r\n    } else {\r\n      if (descriptor !== undefined) {\r\n        this.outputs.updateOutputs(descriptor, this.scale.calcValue(position));\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  takeRoller(roller: HTMLElement | PointerEvent): void {\r\n    if (roller instanceof HTMLElement) {\r\n      this.rollers.determineDescriptor(roller);\r\n      \r\n      if (this.getSettings().range) {\r\n        roller.style.zIndex = '1';\r\n        \r\n        if (this.rollers.getDescriptor() === 0)\r\n        (<HTMLElement>this.getRollers()[1]).style.zIndex = 'auto';\r\n      } else {\r\n        (<HTMLElement>this.getRollers()[0]).style.zIndex = 'auto';\r\n      }\r\n\r\n      // вычислим максимально и минимально допустимые смещения для ролика\r\n      if (this.settings.range) {\r\n        this.calcLimits(roller);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this.settings.range) return;\r\n\r\n    let posFirstRoller: number = this.rollers.getPosition(0);\r\n    let posSecondRolller = this.rollers.getPosition(1);\r\n    let posCursor: number;\r\n\r\n    if (this.settings.type === 'horizontal') {\r\n      posCursor = roller.clientX - this.scale.getScaleOffset();\r\n    } else {\r\n      posCursor = roller.clientY - this.scale.getScaleOffset();\r\n    }\r\n\r\n    let isNearestFirstRoller: boolean =\r\n      Math.abs(posCursor - posFirstRoller) < Math.abs(posCursor - posSecondRolller);\r\n\r\n    if (isNearestFirstRoller){\r\n      this.rollers.setDescriptor(0);\r\n    } else {\r\n      this.rollers.setDescriptor(1);\r\n    }\r\n\r\n    let descriptor = this.rollers.getDescriptor();\r\n    this.calcLimits(this.template.getRollers()[descriptor] as HTMLElement);\r\n  }\r\n\r\n  throwRoller(roller: HTMLElement): void {\r\n\r\n  }\r\n\r\n  getRollers(): NodeList {\r\n    return this.template.getRollers();\r\n  }\r\n\r\n  getSlider(): HTMLElement {\r\n    return this.template.getSlider();\r\n  }\r\n\r\n  getScale(): HTMLElement {\r\n    return this.template.getScale();\r\n  }\r\n\r\n  getRange(): HTMLElement {\r\n    return this.template.getRange();\r\n  }\r\n\r\n  getSettings(): sliderSettings {\r\n    return this.settings;\r\n  }\r\n\r\n  // вычисляет максимально и минимально допустимые смещения ролика\r\n  private calcLimits(roller: HTMLElement): void {\r\n    if (this.settings.type === 'horizontal') {\r\n      if (roller === this.template.getRollers()[0]) {\r\n        this.minLimit = 0;\r\n        this.maxLimit= this.rollers.getPosition(1);\r\n      }\r\n\r\n      if (roller === this.template.getRollers()[1]) {\r\n        this.minLimit = this.rollers.getPosition(0);\r\n        this.maxLimit = this.scale.getScaleSize();\r\n      }\r\n    } else {\r\n      if (roller === this.template.getRollers()[0]) {\r\n        this.minLimit =this.rollers.getPosition(1);\r\n        this.maxLimit = this.scale.getScaleSize();\r\n      }\r\n\r\n      if (roller === this.template.getRollers()[1]) {\r\n        this.minLimit = 0;\r\n        this.maxLimit = this.rollers.getPosition(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleDocumentResize(): void {\r\n    // пересчитаем размеры шкалы\r\n    this.scale.calcSizes();\r\n\r\n    if (!this.settings.range) {\r\n      this.maxLimit = this.scale.getScaleSize();\r\n    }\r\n\r\n    // обновим позиции бегунков\r\n    let inputValue: number;\r\n    let position: number;\r\n\r\n    this.getInputs().forEach( (input, i) => {\r\n      inputValue = +(<HTMLInputElement>input).value;\r\n      position  = this.calcPosition(inputValue);\r\n      this.rollers.slide(position, <0 | 1>i);\r\n    });\r\n\r\n    let { startPos, endPos } = this.calcStartEndPositionsOfRange();\r\n    this.range.paint(startPos, endPos);\r\n\r\n    this.outputs.rerenderOutputs();\r\n  }\r\n\r\n  // расчитывает смещение бегунка относительно шкалы\r\n  private calcPosition(value: number | PointerEvent): number {\r\n    let position: number;\r\n\r\n    if (typeof value === 'number') {\r\n      position = value / (this.settings.max - this.settings.min);\r\n      position *= this.scale.getScaleSize();\r\n      position -= this.scale.getZeroOffset();\r\n\r\n      if (this.settings.type ==='vertical') {\r\n        position = this.scale.getScaleSize() - position\r\n      }\r\n\r\n      return position;\r\n    }\r\n\r\n    if (this.settings.type === 'vertical') {\r\n      position = value.clientY - this.scale.getScaleOffset();\r\n    } else {\r\n      position = value.clientX - this.scale.getScaleOffset();\r\n    }\r\n\r\n    position -= this.rollers.getSize()/2;\r\n\r\n    // если расчитаная позиция не в допустимом диапазоне вернем ближайшее допустимое значение\r\n    let validValue = this.getNearestValidValue(position);\r\n    if (validValue !== position) return validValue;\r\n\r\n    if (value.type === 'pointermove') {\r\n      // вычислим на какое количество шагов необходимо сдвинуть бегунок\r\n      let steps = this.calcCountSteps(position);\r\n      position = this.rollers.getLastUpdatedPosition() + steps * this.scale.getStep();  \r\n    } \r\n\r\n    // если расчитаная позиция не в допустимом диапазоне вернем ближайшее допустимое значение\r\n    validValue = this.getNearestValidValue(position);\r\n    if (validValue !== position) return validValue;\r\n\r\n    return +position.toFixed(3);\r\n  }\r\n\r\n  private getNearestValidValue(value: number): number {\r\n    if (value > this.maxLimit) {\r\n      return this.maxLimit;\r\n    }\r\n\r\n    if (value < this.minLimit) {\r\n      return this.minLimit;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private calcCountSteps(position: number): number {\r\n    // вычислим смещение курсора в пикселях\r\n    let offset: number = position - this.rollers.getLastUpdatedPosition();\r\n\r\n    // вычислим на какое количество шагов необходимо сдвинуть бегунок\r\n    let steps: number = Math.round(offset / this.scale.getStep() );\r\n    return steps;\r\n  }\r\n\r\n  // возвращает позиции начала и конца закрашиваемого диапазона\r\n  private calcStartEndPositionsOfRange(): { startPos: number, endPos: number } {\r\n    let startPos: number;\r\n    let endPos: number;\r\n    if (this.settings.range) {\r\n      startPos = this.rollers.getPosition(0);\r\n      endPos = this.rollers.getPosition(1);\r\n    } else {\r\n      startPos = 0;\r\n      endPos = this.rollers.getPosition(0);\r\n    }\r\n\r\n    if (this.settings.type === 'horizontal'){\r\n      endPos = this.scale.getScaleSize() - endPos;\r\n    } else {\r\n      if (this.settings.range) {\r\n        startPos = this.scale.getScaleSize() - startPos;\r\n      }\r\n    }\r\n\r\n    return { startPos, endPos };\r\n  }\r\n\r\n  private addSmoothTransition(descriptor: 0 | 1): void {\r\n    this.getRange().classList.add('slider__range_smooth');\r\n    (<HTMLElement>this.getRollers()[descriptor]).classList.add('slider__roller_smooth');\r\n  }\r\n\r\n  private removeSmoothTransition = (descriptor: 0 |1): void => {\r\n    this.getRange().classList.remove('slider__range_smooth');\r\n    (<HTMLElement>this.getRollers()[descriptor]).classList.remove('slider__roller_smooth');\r\n  }\r\n}\r\n\r\nexport default SliderView;\r\nexport type { ISliderView };","import type { IRoller } from \"./Roller\";\r\nimport type { IScale } from \"./typingForScale\";\r\n\r\ninterface ISliderModel extends IScale{\r\n  getValue(): [number, number] | number;\r\n  setValue(value: number, descriptor: 0 | 1): void;\r\n};\r\n\r\nclass SliderModel implements ISliderModel {\r\n  constructor(\r\n    private rollers:[IRoller, IRoller] | [IRoller],\r\n    private scale: IScale\r\n  ) {\r\n      this.rollers.forEach( (roller, i) => {\r\n        let isValid: boolean = this.checkValue(roller.getValue(), i)\r\n        if (!isValid) {\r\n          throw Error(\"Некорректное значение бегунка\")\r\n        }\r\n      });\r\n  }\r\n\r\n  getValue(): [number, number] | number  {\r\n    return this.rollers.length === 2 ?\r\n      [this.rollers[0].getValue(), this.rollers[1].getValue()] :\r\n      this.rollers[0].getValue();\r\n  }\r\n\r\n  setValue(value: number, descriptor: 0 | 1) {\r\n    let isIntoRange: boolean =\r\n      this.checkValue(value, descriptor);\r\n\r\n    if (isIntoRange ) {\r\n      this.rollers[descriptor]?.setValue(value);\r\n    } else {\r\n      throw Error(\"Некорректное значение бегунка\");\r\n    }\r\n  }\r\n\r\n  getMinValue(): number {\r\n    return this.scale.getMinValue();\r\n  }\r\n\r\n  getMaxValue(): number {\r\n    return this.scale.getMaxValue();\r\n  }\r\n\r\n  getStep(): number {\r\n    return this.scale.getStep();\r\n  }\r\n\r\n  setMinValue(value:number) {\r\n    this.scale.setMinValue(value);\r\n  }\r\n\r\n  setMaxValue(value: number) {\r\n    this.scale.setMaxValue(value);\r\n  }\r\n\r\n  setStep(value: number) {\r\n    this.scale.setStep(value);\r\n  }\r\n\r\n  private checkValue(value:number, descriptor: number): boolean {\r\n    let min: number;\r\n    let max: number;\r\n\r\n    if (this.rollers[1]) {\r\n      if (descriptor === 0) {\r\n        min = this.scale.getMinValue();\r\n        max = this.rollers[1].getValue();\r\n      } else {\r\n        min = this.rollers[0].getValue();\r\n        max = this.scale.getMaxValue();\r\n      }\r\n    } else {\r\n      min = this.scale.getMinValue();\r\n      max = this.scale.getMaxValue();\r\n    }\r\n\r\n    let isNotLess: boolean = value >= min;\r\n    let isNotMore: boolean = value <= max;\r\n    return isNotLess && isNotMore;\r\n  }\r\n}\r\n\r\nexport default SliderModel;\r\nexport type { ISliderModel };","import type { ISliderModel } from '../model/SliderModel';\r\nimport type { ISliderView } from '../view/SliderView';\r\n\r\ninterface ISliderController {\r\n  getValue(): [number, number] | number;\r\n  setValue(value: number, descriptor: 0 | 1): void;\r\n}\r\n\r\nclass SliderController implements ISliderController {\r\n  private view: ISliderView; // view слайдера\r\n  private slider: ISliderModel; // модель слайдера\r\n  private currentRoller: HTMLElement | null = null;\r\n  private isFirstSlideOfroller: boolean = true;\r\n\r\n  constructor(view: ISliderView, slider: ISliderModel) {\r\n    this.view = view;\r\n    this.slider = slider;\r\n\r\n    // добавим обработчики на события pointerdown, pointermove, pointerup\r\n    this.view.getSlider().addEventListener('pointerdown', this.handleDocumentPointerdown);\r\n    document.addEventListener('pointerup', this.handleDocumentPointerup);\r\n  }\r\n\r\n  // возвращает значения бегунков\r\n  getValue(): [number, number] | number {\r\n    return this.slider.getValue();\r\n  }\r\n\r\n  // устанавливает значния бегунков\r\n  setValue(value: number, descriptor: 0 | 1 = 0): void {\r\n    try {\r\n      this.slider.setValue(value, descriptor);\r\n      this.view.update(value, descriptor);\r\n      \r\n      this.dispatchCustomEvent('change');\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n  }\r\n\r\n  // обработчики событий указателя\r\n  private handleDocumentPointerdown = (e: PointerEvent): void => {\r\n    // добавим обработчик на событие pointermove если оно произошло на бегунке\r\n    if (e.button === 0 ) {\r\n      let target: HTMLElement = e.target as HTMLElement;\r\n      let scale: HTMLElement = this.view.getScale();\r\n      let range: HTMLElement = this.view.getRange();\r\n\r\n\r\n      if (this.isRoller(target) || target === scale || target === range) {\r\n        document.addEventListener('pointermove', this.handleDocumentPointermove);\r\n      }\r\n\r\n      if (target === scale || target === range) {\r\n        // найдём ближаший ролик от позиции клика\r\n        this.view.takeRoller(e);\r\n        let props: { value: number, descriptor: 0 | 1 } | null = this.view.update(e);\r\n\r\n        // если бегунок перемещен обновим модель\r\n        if (props) {\r\n          let { value, descriptor } = props;\r\n          this.slider.setValue(value, descriptor);\r\n          this.dispatchCustomEvent('slide');\r\n          this.dispatchCustomEvent('change');\r\n        }\r\n      }\r\n\r\n      if (this.isRoller(target) ) {\r\n        this.currentRoller = target;\r\n        this.view.takeRoller(target);\r\n      }\r\n    }\r\n  }\r\n\r\n  private dispatchCustomEvent(eventName: string): void {\r\n    const event = new CustomEvent(eventName, {\r\n      detail: {\r\n        values: this.getValue(),\r\n        positions: this.view.getRollersPositions()\r\n      }    \r\n    });\r\n    this.view.getSlider().dispatchEvent(event);\r\n  }\r\n\r\n\r\n  private handleDocumentPointermove = (e: PointerEvent): void => {\r\n    // обновим view\r\n    let props: { value: number, descriptor: 0 | 1 } | null = this.view.update(e);\r\n\r\n    // если бегунок перемещен обновим модель\r\n    if (props) {\r\n      let { value, descriptor } = props;\r\n      this.slider.setValue(value, descriptor);\r\n\r\n      if (this.isFirstSlideOfroller) {\r\n        this.dispatchCustomEvent('start');\r\n        this.isFirstSlideOfroller = false;\r\n      }\r\n      this.dispatchCustomEvent('slide');\r\n      this.dispatchCustomEvent('change');\r\n    }\r\n  }\r\n\r\n  private handleDocumentPointerup = (e: PointerEvent): void => {\r\n    if (!this.isFirstSlideOfroller) {\r\n      this.dispatchCustomEvent('stop');\r\n      this.isFirstSlideOfroller = true;\r\n    }\r\n\r\n    // удалим обработчик на событие pointermove\r\n    document.removeEventListener('pointermove', this.handleDocumentPointermove);\r\n    this.view.throwRoller(this.currentRoller!);\r\n  }\r\n\r\n  private isRoller(target: HTMLElement): boolean {\r\n    let isFirstRoller = target === this.view.getRollers()[0];\r\n    let isSecondRoller = target === this.view.getRollers()[1];\r\n\r\n    return isFirstRoller || isSecondRoller;\r\n  }\r\n}\r\n\r\nexport default SliderController;\r\nexport type { ISliderController };","import Scale from'./model/Scale';\r\nimport Roller from './model/Roller';\r\nimport SliderView from './view/SliderView';\r\nimport SliderModel from './model/SliderModel';\r\nimport SliderController from './controller/SliderController';\r\nimport type { ISliderController  } from './controller/SliderController';\r\nimport type { eventNames, sliderSettings } from './sliderSettings';\r\nimport './view/SliderView.scss';\r\n\r\nclass Slider implements ISliderController {\r\n  private controller: ISliderController;\r\n  private settings: sliderSettings;\r\n\r\n  constructor(container: string, userSettings: object) {\r\n    let defaultSettings: sliderSettings = {\r\n      min: 0,\r\n      max: 100,\r\n      step: 1,\r\n      type: 'horizontal',\r\n      range: false,\r\n      values: [50]\r\n    };\r\n\r\n    let settings: sliderSettings;\r\n    // объединим дефолтные настройки с пользовательскими\r\n    settings = { ...defaultSettings, ...userSettings };\r\n    \r\n    // если пользователь перепутал поля для минимального и\r\n    // максимального значений шкалы поменяем занчения местами\r\n    let isWrongOrder: boolean = settings.min > settings.max;\r\n    if (isWrongOrder) {\r\n      [settings.min, settings.max] = [settings.max, settings.min];\r\n    }\r\n    \r\n    // зададим значения слайдера\r\n    if (settings.range && settings.values.length === 1) {\r\n      settings.values = [settings.min, settings.max];\r\n    }\r\n\r\n    if (!settings.range && settings.values === defaultSettings.values){\r\n      settings.values = [settings.max / 2  + ( (settings.min - 0) / 2)];\r\n    }\r\n\r\n    this.settings = settings;\r\n\r\n    // если слайдер с диапазоном создадим два бегунка, иначе один\r\n    let rollers: [Roller, Roller] | [Roller];\r\n    settings.range && settings.values.length === 2 ?\r\n      rollers = [new Roller(settings.values[0]), new Roller(settings.values[1]) ] :\r\n      rollers = [new Roller(settings.values[0])];\r\n\r\n    // создадим шкалу\r\n    let scale: Scale = new Scale(settings);\r\n\r\n    // создадим модель слайдера\r\n    let sliderModel: SliderModel = new SliderModel(rollers, scale);\r\n\r\n    // контейнер для инициализации слайдера\r\n    let $container: HTMLElement | null = document.getElementById(container);\r\n\r\n    // создадим view и контроллер если $container существует\r\n    if ($container) {\r\n      let view = new SliderView($container, settings);\r\n      this.controller = new SliderController(view, sliderModel);\r\n     \r\n      settings.create?.({\r\n        values: this.getValue(),\r\n        positions: view.getRollersPositions(),\r\n        slider: this\r\n      });\r\n      this.addListener(view, 'start');\r\n      this.addListener(view, 'slide');\r\n      this.addListener(view, 'change');\r\n      this.addListener(view, 'stop')\r\n    } else {\r\n      throw Error(`не найден контейнер c id '${container}'`);\r\n    }\r\n  }\r\n\r\n  getValue(): [number, number] | number {\r\n    return this.controller.getValue();\r\n  }\r\n\r\n  setValue(value: number, descriptor: 0 | 1 = 0): void {\r\n    this.controller.setValue(value, descriptor);\r\n  }\r\n\r\n  private addListener = (view: SliderView, eventName: eventNames) => {\r\n    view.getSlider().addEventListener(eventName, (e: any) => this.settings[eventName]?.({\r\n      values: e.detail.values,\r\n      positions: e.detail.positions,\r\n      slider: this \r\n    }));\r\n  }\r\n}\r\n\r\nexport default Slider;\r\nexport type { Slider };","import Slider from \"./Slider\";\r\n\r\nlet h: Slider = new Slider(\"h\", {\r\n  min: -50,\r\n  max: 100,\r\n  values: [25],\r\n  names: [\"qwe\"],\r\n  prefix: \"$\",\r\n  grid: true,\r\n  step: 1,\r\n});\r\n\r\nlet hr: Slider = new Slider(\"hr\", {\r\n  range: true,\r\n  step: 5,\r\n  min: -50,\r\n  max: 50,\r\n  values: [-20, 0],\r\n  names: [\"ddd\", \"sssdsd\"],\r\n  prefix: \"$\",\r\n  grid: true,\r\n  change: (data: any) => {\r\n    console.log(\"change\", data.values)\r\n  },\r\n  slide: (data: any) => {\r\n    console.log(\"slide\", data.values)\r\n  },\r\n  create: (data: any) => {\r\n    console.log('create', data.values)\r\n  },\r\n  stop: (data: any) => {\r\n    console.log('stop', data.values)\r\n  },\r\n  start: (data: any) => {\r\n    console.log('start', data.values)\r\n  }\r\n});\r\n\r\nlet v: Slider = new Slider(\"v\", {\r\n  min: 0,\r\n  max: 1000,\r\n  type: \"vertical\",\r\n  grid: true,\r\n\r\n});\r\n\r\nlet vr: Slider = new Slider(\"vr\", {\r\n  range: true,\r\n  min: 0,\r\n  max: 250,\r\n  values: [0, 30],\r\n  step: 16.5,\r\n  type: \"vertical\",\r\n  prefix: \"$\",\r\n  grid: true\r\n});\r\n\r\nhr.setValue(33, 1)"]}